{"version":3,"file":"watdiv-benchmark-runner.js","sourceRoot":"","sources":["watdiv-benchmark-runner.ts"],"names":[],"mappings":";;;AAAA,yBAAyB;AACzB,6BAA4B;AAC5B,uDAAmD;AACnD,uCAAwC;AACxC,6FAAuF;AAGvF,MAAa,YAAY;IAMrB,YAAmB,MAAc,EAAE,UAAkB;QACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;IAC/C,CAAC;IAEM,iBAAiB;QACpB,MAAM,MAAM,GAAG,IAAI,qBAAW,EAAE,CAAC;QACjC,OAAO,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrD,CAAC;IAEM,KAAK,CAAC,gBAAgB,CACzB,OAAiB,EAAE,OAAe,EAClC,eAAwB,EACxB,wBAAkC;QAElC,MAAM,mBAAmB,GAAe,EAAE,CAAA;QAC1C,kEAAkE;QAClE,MAAM,QAAQ,GAAe,EAAE,CAAC;QAChC,MAAM,oBAAoB,GAAsB,EAAE,CAAC;QACnD,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,MAAM,KAAK,IAAI,OAAO,EAAC,CAAC;YACzB,CAAC,IAAI,CAAC,CAAA;YACN,MAAM,iBAAiB,GAAa,EAAE,CAAC;YACvC,MAAM,mBAAmB,GAAa,EAAE,CAAC;YACzC,MAAM,gCAAgC,GAAoB,EAAE,CAAC;YAC7D,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAC,CAAC;gBAC5B,MAAM,OAAO,GAAuB,EAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC;gBAC7D,IAAI,oBAAoB,GAAG,CAAC,CAAC;gBAC7B,IAAI,wBAAwB,EAAC,CAAC;oBAC1B,qGAAqG;oBACrG,mFAAmF;oBACnF,MAAM,4BAA4B,GAAG,IAAI,6DAA4B,EAAE,CAAA;oBACvE,4BAA4B,CAAC,EAAE,CAAC,GAAG,EAAE;wBACjC,oBAAoB,IAAI,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,4BAA4B,CAAC;gBAClF,CAAC;gBACD,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAChC,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAClE,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBACzC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC3D,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,MAAM,2BAA2B,oBAAoB,EAAE,CAAC,CAAA;gBACvF,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;gBAE9B,iBAAiB,CAAC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;gBACpC,mBAAmB,CAAC,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,CAAC;gBAC/C,gCAAgC,CAAC,IAAI,CAAC;oBAClC,QAAQ,EAAE,MAAM,CAAC,MAAM;oBACvB,oBAAoB,EAAE,oBAAoB;iBAC7C,CACA,CAAC;YACN,CAAC;YACD,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC5C,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnC,oBAAoB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC5D,IAAI,eAAe,IAAI,CAAC,IAAI,eAAe,EAAC,CAAC;gBACzC,MAAM;YACV,CAAC;QACL,CAAC;QACD,IAAI,MAAM,GAA8B;YACpC,KAAK,EAAE,mBAAmB;YAC1B,GAAG,EAAE,QAAQ;SAChB,CAAA;QACD,IAAI,wBAAwB,EAAC,CAAC;YAC1B,MAAM,GAAG;gBACL,GAAG,MAAM;gBACT,oBAAoB;aACvB,CAAA;QACL,CAAC;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;IAEM,KAAK,CAAC,GAAG,CACZ,OAAiC,EACjC,OAAe,EACf,cAAyB,EACzB,eAAwB,EACxB,wBAAkC,EAClC,cAAuB;QAEvB,IAAI,gBAAgB,GAA8C,EAAE,CAAC;QACrE,IAAI,gBAAgB,GAA6B,EAAE,CAAA;QACnD,IAAI,cAAc,EAAC,CAAC;YAChB,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAChC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,gBAAgB,CAAA;QAC9B,CAAC;QACD,KAAK,MAAM,QAAQ,IAAI,OAAO,EAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YACrB,gBAAgB,CAAC,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,wBAAwB,CAAC,CAAC;QACpI,CAAC;QACD,IAAI,cAAc,EAAC,CAAC;YAChB,EAAE,CAAC,aAAa,CACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,CAAC,EAC1D,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CACpD,CAAC;QACN,CAAC;IACL,CAAC;CACJ;AA1GD,oCA0GC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path'\nimport { ComunicaRunner } from \"./comunica-runner\";\nimport { QueryLoader } from \"./queries\";\nimport { StatisticIntermediateResults} from '@comunica/statistic-intermediate-results';\n\n\nexport class WatDivRunner{\n    public source: string;\n    public queriesDir: string;\n\n    public comunicaRunner: ComunicaRunner;\n\n    public constructor(source: string, queriesDir: string){\n        this.source = source;\n        this.queriesDir = queriesDir;\n        this.comunicaRunner = new ComunicaRunner();\n    }\n\n    public loadWatDivQueries(){\n        const loader = new QueryLoader();\n        return loader.loadWatDivQueries(this.queriesDir);\n    }\n\n    public async runQueryTemplate(\n        queries: string[], repeats: number, \n        max_of_template?: number, \n        trackIntermediateResults?: boolean\n    ): Promise<ITemplateBenchmarkResults>{\n        const totalExecutionTimes: number[][] = []\n        // Query execution time without considering constructing the query\n        const runTimes: number[][] = [];\n        const nIntermediateResults: IResultCounts[][] = [];\n        let i = 0;\n        for (const query of queries){\n            i += 1\n            const measurementsTotal: number[] = [];\n            const measurementsRunTime: number[] = [];\n            const measurementsNIntermediateResults: IResultCounts[] = [];\n            for (let k=0; k < repeats; k++){\n                const context: Record<string,any> = {sources: [this.source]};\n                let nIntermediateResults = 0;\n                if (trackIntermediateResults){\n                    // This statistic should only be invoked in the query operations that the benchmark is interested in.\n                    // In case intermediate join results are counted it should only be for inner joins.\n                    const statisticIntermediateResults = new StatisticIntermediateResults()\n                    statisticIntermediateResults.on(() => {\n                        nIntermediateResults += 1;\n                    });\n                    context[statisticIntermediateResults.key.name] = statisticIntermediateResults;\n                }\n                const start = performance.now();\n                const bs = await this.comunicaRunner.executeQuery(query, context);\n                const startExecution = performance.now();\n                const result = await this.comunicaRunner.consumeStream(bs);\n                console.log(`Results: ${result.length}, intermediate results: ${nIntermediateResults}`)\n                const end = performance.now();\n\n                measurementsTotal.push(end - start);\n                measurementsRunTime.push(end - startExecution);\n                measurementsNIntermediateResults.push({\n                    nResults: result.length,\n                    nIntermediateResults: nIntermediateResults\n                }\n                );\n            }\n            totalExecutionTimes.push(measurementsTotal);\n            runTimes.push(measurementsRunTime);\n            nIntermediateResults.push(measurementsNIntermediateResults);\n            if (max_of_template && i >= max_of_template){\n                break;\n            }\n        }\n        let output: ITemplateBenchmarkResults = {\n            total: totalExecutionTimes,\n            run: runTimes\n        }\n        if (trackIntermediateResults){\n            output = {\n                ...output,\n                nIntermediateResults\n            }\n        }\n        return output\n    }\n\n    public async run(\n        queries: Record<string, string[]>, \n        repeats: number, \n        templatesToRun?: string[], \n        max_of_template?: number, \n        trackIntermediateResults?: boolean,\n        resultFileName?: string\n    ){\n        let benchmarkResults: Record<string, ITemplateBenchmarkResults> = {};\n        let benchmarkQueries: Record<string, string[]> = {}\n        if (templatesToRun){\n            templatesToRun.forEach((template) => {\n                benchmarkQueries[template] = queries[template];\n            });\n            queries = benchmarkQueries\n        }\n        for (const template in queries){\n            console.log(template)\n            benchmarkResults[template] = await this.runQueryTemplate(queries[template], repeats, max_of_template, trackIntermediateResults);\n        }\n        if (resultFileName){\n            fs.writeFileSync(\n                path.join(__dirname, '..', '..', 'output', resultFileName), \n                JSON.stringify(benchmarkResults, null, 2), 'utf8'\n            );\n        }\n    }\n}\n\nexport interface ITemplateBenchmarkResults{\n    total: number[][];\n    run: number[][];\n    nIntermediateResults?: IResultCounts[][];\n}\n\nexport interface IResultCounts{\n    nResults: number,\n    nIntermediateResults: number\n}"]}